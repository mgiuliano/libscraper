#!/usr/bin/python
import os
import sys
import argparse

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
LIB_DIR = os.path.abspath(os.path.join(SCRIPT_DIR, '../libscraper'))
sys.path.append(SCRIPT_DIR)
sys.path.append(LIB_DIR)

def parse_args():
    parser = argparse.ArgumentParser(description='Scraper CLI.')
    parser.add_argument('action', metavar='action', type=str,
                        choices=['show-targets', 'get-urlinfo', 'parse-url', 'get-deals', 'get-deal'],
                        help='Parser actions: show-targets, parseurl, urlinfo, get-deals, get-deal')
    parser.add_argument('--url', type=str, help='target URL')
    args = parser.parse_args()
    if args.action in ('get-urlinfo', 'parse-url', 'get-deals', 'get-deal') and args.url is None:
        parser.error('URL must be given.')
    return (args.action, args.url)


def main():

    from libscraper import scraper, exceptions
    
    scrpr = scraper.Scraper(verbose=True)
    action, url = parse_args()

    if action == 'show-targets':
        for target in scrpr._targets:
            scrpr.logger.debug(" >> %s" % target.tostring())

    elif action == 'get-urlinfo':
        scrpr.logger.debug("Info for URL \"%s\"" % url)
        info = scrpr.urlinfo(url)
        for key, value in info.items():
            scrpr.logger.debug(" >> %s: %s" % (key, value))

    elif action == 'parse-url':
        tree = scrpr.parse(url)
        scrpr.logger.debug(" << %s" % tree)

    elif action == 'get-deals':
        deals = scrpr.get_deals(url)
        if deals:
            for deal in deals:
                for k, v in deal.items():
                    scrpr.logger.debug("{:s}: {!s}".format(k, v))
                scrpr.logger.debug('--')

    elif action == 'get-deal':
        try:
            deal = scrpr.get_deal(url)
        except exceptions.ElementMissing as e:
            scrpr.logger.debug(" >>> Element Missing -- {!s}".format(e))
        else:
            for k, v in deal.items():
                scrpr.logger.debug(' >> ' + str(k) + ": " + str(v))

    exit(0)

if __name__ == "__main__":
    main()
